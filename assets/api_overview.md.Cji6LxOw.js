import{_ as s,c as a,o as e,ae as t}from"./chunks/framework.CBTkueSR.js";const c=JSON.parse('{"title":"API Overview","description":"","frontmatter":{},"headers":[],"relativePath":"api/overview.md","filePath":"api/overview.md"}'),n={name:"api/overview.md"};function r(l,i,h,p,o,d){return e(),a("div",null,[...i[0]||(i[0]=[t(`<h1 id="api-overview" tabindex="-1">API Overview <a class="header-anchor" href="#api-overview" aria-label="Permalink to &quot;API Overview&quot;">​</a></h1><p>This section provides a comprehensive reference for all APIs provided by NestJS Crypto.</p><h2 id="core-services" tabindex="-1">Core Services <a class="header-anchor" href="#core-services" aria-label="Permalink to &quot;Core Services&quot;">​</a></h2><h3 id="bcryptservice" tabindex="-1">BcryptService <a class="header-anchor" href="#bcryptservice" aria-label="Permalink to &quot;BcryptService&quot;">​</a></h3><p>Password hashing service using bcrypt algorithm.</p><ul><li><a href="/api/bcrypt-service.html">Full API Reference</a></li><li><strong>Use Case</strong>: Password hashing, user authentication</li><li><strong>Algorithm</strong>: bcrypt with configurable salt rounds</li></ul><h3 id="aesservice" tabindex="-1">AesService <a class="header-anchor" href="#aesservice" aria-label="Permalink to &quot;AesService&quot;">​</a></h3><p>Data encryption/decryption service using AES-256-CBC.</p><ul><li><a href="/api/aes-service.html">Full API Reference</a></li><li><strong>Use Case</strong>: Data encryption, sensitive information storage</li><li><strong>Algorithm</strong>: AES-256-CBC with auto-generated keys and IVs</li></ul><h2 id="utility-functions" tabindex="-1">Utility Functions <a class="header-anchor" href="#utility-functions" aria-label="Permalink to &quot;Utility Functions&quot;">​</a></h2><p>Helper functions for key and secret generation.</p><ul><li><a href="/api/utilities.html">Full API Reference</a></li><li><code>generateAesKey()</code> - Generate AES encryption key</li><li><code>generateAesIv()</code> - Generate initialization vector</li><li><code>generateSecret()</code> - Generate random secret</li></ul><h2 id="module-configuration" tabindex="-1">Module Configuration <a class="header-anchor" href="#module-configuration" aria-label="Permalink to &quot;Module Configuration&quot;">​</a></h2><h3 id="cryptomodule" tabindex="-1">CryptoModule <a class="header-anchor" href="#cryptomodule" aria-label="Permalink to &quot;CryptoModule&quot;">​</a></h3><p>Main module for configuring and registering services.</p><h4 id="static-configuration" tabindex="-1">Static Configuration <a class="header-anchor" href="#static-configuration" aria-label="Permalink to &quot;Static Configuration&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CryptoModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options: CryptoModuleOptions)</span></span></code></pre></div><h4 id="async-configuration" tabindex="-1">Async Configuration <a class="header-anchor" href="#async-configuration" aria-label="Permalink to &quot;Async Configuration&quot;">​</a></h4><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CryptoModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forRootAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options: CryptoModuleAsyncOptions)</span></span></code></pre></div><p>See <a href="/guide/configuration.html">Configuration Guide</a> for details.</p><h2 id="type-definitions" tabindex="-1">Type Definitions <a class="header-anchor" href="#type-definitions" aria-label="Permalink to &quot;Type Definitions&quot;">​</a></h2><h3 id="cryptomoduleoptions" tabindex="-1">CryptoModuleOptions <a class="header-anchor" href="#cryptomoduleoptions" aria-label="Permalink to &quot;CryptoModuleOptions&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CryptoModuleOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  isGlobal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  useBcrypt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  useAes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  bcryptSaltRounds</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  aesKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  aesIv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  debug</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  showSecret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="cryptomoduleasyncoptions" tabindex="-1">CryptoModuleAsyncOptions <a class="header-anchor" href="#cryptomoduleasyncoptions" aria-label="Permalink to &quot;CryptoModuleAsyncOptions&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CryptoModuleAsyncOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  imports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  useFactory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CryptoModuleOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CryptoModuleOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  inject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[];</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  useClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CryptoModuleOptionsFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  useExisting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CryptoModuleOptionsFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="error-classes" tabindex="-1">Error Classes <a class="header-anchor" href="#error-classes" aria-label="Permalink to &quot;Error Classes&quot;">​</a></h2><p>Custom error classes for better error handling:</p><ul><li><code>CryptoError</code> - Base error class</li><li><code>ValidationError</code> - Input validation errors</li><li><code>EncryptionError</code> - Encryption operation errors</li><li><code>DecryptionError</code> - Decryption operation errors</li><li><code>HashingError</code> - Hashing operation errors</li><li><code>InvalidKeyError</code> - Invalid key/IV format errors</li></ul><h3 id="error-handling-example" tabindex="-1">Error Handling Example <a class="header-anchor" href="#error-handling-example" aria-label="Permalink to &quot;Error Handling Example&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ValidationError, EncryptionError } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;nestjs-crypto&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bcryptService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ValidationError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Handle validation error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HashingError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Handle hashing error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="quick-reference" tabindex="-1">Quick Reference <a class="header-anchor" href="#quick-reference" aria-label="Permalink to &quot;Quick Reference&quot;">​</a></h2><h3 id="bcryptservice-methods" tabindex="-1">BcryptService Methods <a class="header-anchor" href="#bcryptservice-methods" aria-label="Permalink to &quot;BcryptService Methods&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Method</th><th>Description</th><th>Returns</th></tr></thead><tbody><tr><td><code>hash(data, saltRounds)</code></td><td>Hash data with bcrypt</td><td><code>Promise&lt;string&gt;</code></td></tr><tr><td><code>hashSync(data, saltRounds)</code></td><td>Hash data synchronously</td><td><code>Promise&lt;string&gt;</code></td></tr><tr><td><code>compare(data, hash)</code></td><td>Compare data with hash</td><td><code>Promise&lt;boolean&gt;</code></td></tr><tr><td><code>compareSync(data, hash)</code></td><td>Compare synchronously</td><td><code>Promise&lt;boolean&gt;</code></td></tr><tr><td><code>genSalt(saltRounds)</code></td><td>Generate salt</td><td><code>Promise&lt;string&gt;</code></td></tr><tr><td><code>getSaltRounds(hash)</code></td><td>Extract salt rounds</td><td><code>Promise&lt;number&gt;</code></td></tr></tbody></table><h3 id="aesservice-methods" tabindex="-1">AesService Methods <a class="header-anchor" href="#aesservice-methods" aria-label="Permalink to &quot;AesService Methods&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Method</th><th>Description</th><th>Returns</th></tr></thead><tbody><tr><td><code>encrypt(data, key?, iv?)</code></td><td>Encrypt data</td><td><code>{encrypted, key, iv}</code></td></tr><tr><td><code>decrypt(encrypted, key, iv)</code></td><td>Decrypt data</td><td><code>string</code></td></tr><tr><td><code>generateKey()</code></td><td>Generate AES key</td><td><code>Buffer</code></td></tr><tr><td><code>generateIv()</code></td><td>Generate IV</td><td><code>Buffer</code></td></tr></tbody></table><h2 id="typedoc-api-documentation" tabindex="-1">TypeDoc API Documentation <a class="header-anchor" href="#typedoc-api-documentation" aria-label="Permalink to &quot;TypeDoc API Documentation&quot;">​</a></h2><p>For complete TypeScript API documentation with all types, interfaces, and detailed method signatures, visit:</p><p><strong><a href="https://nestjs-crypto-api.pages.dev/" target="_blank" rel="noreferrer">TypeDoc API Reference →</a></strong></p><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="/api/bcrypt-service.html">BcryptService API</a> - Detailed Bcrypt API</li><li><a href="/api/aes-service.html">AesService API</a> - Detailed AES API</li><li><a href="/api/utilities.html">Utility Functions</a> - Helper utilities</li><li><a href="/examples/authentication.html">Examples</a> - Real-world examples</li></ul>`,40)])])}const y=s(n,[["render",r]]);export{c as __pageData,y as default};
